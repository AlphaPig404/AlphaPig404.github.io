[{"title":"布局解决方案之多列布局","date":"2017-01-09T12:56:48.000Z","path":"2017/01/09/布局解决方案之多列布局/","text":"多列布局包括： 定宽布局 定宽+自适应 不定宽+自适应 定宽 + 自适应 float + margin HTML结构 &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;p&gt;left&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;p&gt;right&lt;/p&gt; &lt;p&gt;right&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; CSS结构 .left{ float: left; width: 100px; _margin-right: -3px;//兼容ie6方案 } .right{ margin-left: 120px;//多出的20px是间距 } 缺点：1.兼容性，在ie6上会产生3像素的bug(.right会往左边缩进3px;)；用clear：both清除浮动时.right会掉下来。 针对上面的问题的方案 float + margin + (fix) HTML结构 &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;p&gt;left&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;right-fix&quot;&gt; &lt;div class=&quot;right&quot;&gt; &lt;p&gt;right&lt;/p&gt; &lt;p&gt;right&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; CSS结构 .left{ float: left; position: relative;//提高层级用 } .right-fix{ float: right; margin-left: -100px; } .right{ margin-left:120xp; } 优点：兼容所有浏览器；缺点：多一层结构(.right-fix) float + overflow HTML结构 &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;p&gt;left&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;p&gt;right&lt;/p&gt; &lt;p&gt;right&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; CSS结构 .left{ float: left; width: 100px; margin-right: 20px; } .right{ overflow: hidden } overflow:hidden会使得.right成为BFC，不受外面布局的影响。优点：结构简单；缺点：不支持ie6(overflow); table HTML同上 CSS结构 .parent{ diplay: table; width: 100%; table-layout: fixed;//布局优先，提高table渲染速度 } .left,.right{ display: table-cell; } .left{ width: 100px; padding-right: 20px;//table上无法设置margin } 缺点：代码多，且兼容不到ie6、7(table) flex HTML同上 CSS结构 .parent{ display: flex; } .left{ width: 100px; margin-right: 20px; } .right{ flex: 1;//分配剩余 } 缺点：只支持高级浏览器，且存在一定的性能问题。一般只用来做小范围的布局。 不定宽+自适应从上面定宽+自适应的方案中进行筛选，如果定宽列与自适应列存在耦合的话，就没有办法做到不定宽+自适应。这么来看的话只有3个方案： float+overflow table flex float + overflowHTML结构同上 CSS结构 .left{ float: left; margin-right: 20px; } .right{ overflow: hidden; } /* .left p{width:200px;} */靠内容撑开宽度 缺点：不兼容ie6(最好的兼容方案是放弃ie6) tableHTML结构同上 CSS结构 .parent{ display: table; width:100%; } .left,.right{ display: table-cell; } .left{ width: 0.1%;// padding-right: 20px; } /* .left p{width: 200px;} */内容撑开 缺点：不兼容ie6、7(table) flexHTML结构同上 CSS结构 .parent{ display: flex; } .left{ margin-right: 200px; } .right{ flex: 1; } /* .left p{width: 200px;} */内容撑开 缺点：ie6？ie7？ie8？什么叫高级浏览器 等分布局floatHTML结构 &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;1&lt;p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;4&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; 用float来实现的话只能用相同百分比(100%/columns)来设置宽度，当列之间存在间隙时需要用margin负值来增大宽度，且间隙需要包含在百分比中。 CSS结构如下 .parent{ margin-left: -20px;//增加1个间隙的宽度 } .column{ float: left; width: 25%; padding-left: 20px; box-sizing: border-box;//将padding包在width内 } 优点：除了ie6、7对浮点数四舍五入的问题，ie8以上浏览器都兼容缺点：列数发生变化时无法做到自适应 tabletable同样存在处理间隙的问题，但是table不能设置margin，因此需要修改HTML结构。 HTML结构 &lt;div class=&quot;parent-fix&quot;&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;1&lt;p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;4&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; CSS结构 .parent-fix{ margin-left: -20px;//扩大这一层的宽度 } .parent{ display: table; width: 100%; table-layout: fixed;//布局优先；默认等分 } .column{ display: table-cell; padding-left: 20px; } 优点：列数变化时可自动适应；缺点：兼容性。。 flexHTML结构 &lt;div class=&quot;parent-fix&quot;&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;1&lt;p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt; &lt;div class=&quot;column&quot;&gt;&lt;p&gt;4&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; CSS结构 .parent{ display: flex; } .column{ flex: 1; } .column+.column{ margin-left:20px; } 优点：结构简单，自动等分；缺点：兼容性。。 等高布局table和flextable和flex的等高是“与生俱来的”，上面的结构都是等高的。不同的是table没法实现不等高，而flex可以通过vertical-align来进行调整。(因为默认vertical-align是stretch,元素被拉伸)。 floatHTML结构 &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;p&gt;left&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;p&gt;right&lt;/p&gt; &lt;p&gt;right&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; CSS结构 .parent{ overflow: hidden;//截取背景 } .left,.right{ padding-bottom: 9999px;//拉伸背景 margin-bottom: -9999px;//抵消padding } .left{ float: left; width: 100px; margin-right: 20px; } .right{ overflow: hidden } 优点：兼容性比table和flex要好；缺点：伪等高，只是背景看起来等高，内容区高度无变化。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"布局解决方案之居中布局","date":"2017-01-09T07:59:40.000Z","path":"2017/01/09/布局解决方案之居中布局/","text":"居中方案包括水平居中、垂直居中和垂直水平居中，以下方案针对的是parent和child不定宽高的情况 水平居中水平居中方案: inline-block+text-align table+margin absolute+transform flex+justify-content inline-block + text-align HTML &lt;div class = &quot;parent&quot;&gt; &lt;div class=&quot;child&quot;&gt;DEMO&lt;/div&gt; &lt;/div&gt; CSS部分 .child{ display: inline-block; } .parent{ text-align: center; } 优点：兼容性比较好，ie6、7不支持inline-block，可触发haslayout做兼容。（display:inline; \\zoom:1）缺点：child元素会继承到text-align，如果里面的内容不需要居中的话就得追加额外的代码。 table + margin CSS部分 .child{ display: table; margin: 0 auto; } 优点：结构简单缺点：如果需要兼容ie6、7的话就需要将HTML结构更换成table布局。但由于table存在渲染效率的问题，一般都不会推荐用这种方法。 absolute + transform CSS部分 .parent{ position: relative; } .child{ position: absolute; left: 50%; transform: translateX(-50%); } 优点：absolute是脱离文档流的，因此不会对其他元素产生影响；缺点：无法兼容ie6、7、8(transform的兼容问题)。 flex + justify-content CSS部分 .parent{ display: flex; justify-content: center;//如果不用这个 } /* .child{ margin: 0 auto; } */ 优点：只需要设置父元素(或子元素margin)；缺点：不支持ie6、7、8(flex的兼容问题)。 垂直居中垂直居中方案： tabel-cell + vertical-align absolute + transform flex + align-items tabel-cell + vertical-align .parent{ display: table-cell; vertical-align:middle;//作用在inline特征的元素上 } 优缺点同水平布局中的table方案。 absolute + transform .parent{ position: relative; } .child{ position:absolute; top: 50%; trnsform: translateY(-50%); } 优缺点同水平布局中的transform方案。 flex + align-items .parent{ display: flex; align-items: center; } 优缺点同水平布局的flex方案 水平垂直居中结合上面的方案： inline-block + text-align + table-cell + vertical-align; absolute + transform; flex + justify-conten + align-items inline-block + text-align + table-cell + vertical-align .parent{ text-align: center; display: table; verttical-align: center; } .child{ display:inline-block; } 优缺点同上。 absolute + transform .parent{ position: relative; } .child{ position: absolute; left: 50%; top: 50%; tranform: translate(-50%,-50%); } 优缺点同上。 flex + justify-content + align-items .parent{ display: flex; justify-conten: center; align-items: center; } 优缺点同上。","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"git常用命令","date":"2017-01-03T13:42:53.000Z","path":"2017/01/03/git/","text":"git是用于Linux内核开发的版本控制工具。与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git的速度很快，这对于诸如Linux内核这样的大项目来说自然很重要。git最为出色的是它的合并追踪（merge tracing）能力。 本地操作创建版本库git init 创建一个本地文件夹dir，通过git init命令把这个文件夹编程git可以管理的仓库。在仓库里面创建的文件都能通过git操作。 工作区、暂存区和提交区仓库中创建的文件默认是工作区。 git add &lt;file 通过git add命名可以把文件的修改添加到暂存区；git add .可以一次性添加所有的文件修改；git add “*.txt”添加指定格式的文件修改。 git commit 通过git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支(branch).正常的使用是git commit -m ”提交信息“，加上提交信息来提交，方便管理。 git status 可以用来追踪文件状态。 git diff 可以看到文件修改过的地方，在add之前使用。每次的文件修改都需要add到缓存区才能保存修改。 撤销操作git reset HEAD &lt;file 可以将暂存区的修改回退到工作区，且会保留修改。 git checkout –&lt;file 可以将暂存区的修改回退到工作区，且会丢弃工作区的修改。实际上是用版本库里的版本替代工作区的版本，无论工作区是修改还是删除，都能被还原到之前的状态。 git reset –[hard|soft|mixd|merge|keep]&lt;commit_id|HEAD^n 将当前版本回退到指定的commit_id(绝对路径)或者HEAD前n次提交的版本(相对路径)。通过git log命令能够看到提交历史，包含每次提交的commit_id，通过git reflog能看到所有HEAD的历史，也就是reset，checkout等操作的操作记录。参数hard会直接丢弃回退路径上的历史提交；参数soft只是将HEAD指向回退的版本，路径上的提交内容会回退到暂存区… git rm &lt;file 删除指定文件 关联仓库git remote add origin 通过git remote add origin git@github.com:user/repository可以将本地仓库与远程仓库相关联，利用git push -u origin &lt;branch 将本地库所有内容推送到远程库上，-u只在第一次推送时使用。 远程仓库(以GitHub为例)创建版本库git clone git clone git@github.com:user/repositorygit clone ssh|https://github.com/repositoryURL git remote 通过clone操作得到的本地仓库与远程仓库自动对应，可以通过git remote -v来查看远程仓库的地址。 git push 通过git push origin branch-name来推送修改的内容。 git pull 获取远程仓库来更新本地仓库并合并到远程仓库。相当于git fetch加上git merge。 PS：通过git push origin :branch-name能删除远程的分支。 分支操作分支的增删查改git checkout -b dev 创建dev分支，并切换到dev分支。相当于git branch dev和git checkout dev两个操作。 git branch查看当前所有分支与当前所在分支。 git checkout dev 切换到dev分支 git merge dev 把dev分支的提交结果合并到指定checkout的分支，并不一定是master分支。 git branch -d dev 删除dev分支，在dev分支合并后才能执行。如果要丢弃一个没有合并的dev，可以通过git branch -D dev强行删除。 合并冲突执行合并分支到远端命令时，会因为远端分支的改动而出现与本地原分支不匹配的情况，需要手动改动冲突文件，提交到本地分支，然后再合并。在合并改动前，可以使用git diff &lt;source_branch &lt;target_branch来预览差异。 多人协作多人协作的工作模式通常是这样：首先，可以试图用git push origin branch-name推送自己的修改；如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；如果合并有冲突，则解决冲突，并在本地提交；没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。 参考链接极客学院git教程git简明指南慕课网git技巧","tags":[{"name":"Tools","slug":"Tools","permalink":"http://yoursite.com/tags/Tools/"}]},{"title":"Hello World","date":"2017-01-02T15:45:17.000Z","path":"2017/01/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]